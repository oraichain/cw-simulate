diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
index 3aebdc5..a56a68e 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
@@ -1,5 +1,6 @@
 import { Account, AuthExtension, BankExtension, Block, Coin, DeliverTxResponse, IndexedTx, QueryClient, SearchTxQuery, SequenceResponse, TxExtension } from "@cosmjs/stargate";
 import { HttpEndpoint, TendermintClient } from "@cosmjs/tendermint-rpc";
+import { QueryAllContractStateResponse } from "cosmjs-types/cosmwasm/wasm/v1/query";
 import { JsonObject, WasmExtension } from "./modules";
 export interface Code {
     readonly id: number;
@@ -49,7 +50,7 @@ export declare class CosmWasmClient {
      * This uses auto-detection to decide between a Tendermint 0.37 and 0.34 client.
      * To set the Tendermint client explicitly, use `create`.
      */
-    static connect(endpoint: string | HttpEndpoint): Promise<CosmWasmClient>;
+    static connect(endpoint: string | HttpEndpoint, desiredHeight?: number): Promise<CosmWasmClient>;
     /**
      * Creates an instance from a manually created Tendermint client.
      * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
@@ -136,5 +137,6 @@ export declare class CosmWasmClient {
      * Promise is rejected for invalid response format.
      */
     queryContractSmart(address: string, queryMsg: JsonObject): Promise<JsonObject>;
+    queryContractSmart(address: string, paginationKey: Uint8Array): Promise<QueryAllContractStateResponse>;
     private txsQuery;
 }
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
index 8f6305b..093a700 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
@@ -17,18 +17,18 @@ class CosmWasmClient {
      * This uses auto-detection to decide between a Tendermint 0.37 and 0.34 client.
      * To set the Tendermint client explicitly, use `create`.
      */
-    static async connect(endpoint) {
+    static async connect(endpoint, desiredHeight) {
         // Tendermint/CometBFT 0.34/0.37 auto-detection. Starting with 0.37 we seem to get reliable versions again ðŸŽ‰
         // Using 0.34 as the fallback.
         let tmClient;
-        const tm37Client = await tendermint_rpc_1.Tendermint37Client.connect(endpoint);
+        const tm37Client = await tendermint_rpc_1.Tendermint37Client.connect(endpoint, desiredHeight);
         const version = (await tm37Client.status()).nodeInfo.version;
         if (version.startsWith("0.37.")) {
             tmClient = tm37Client;
         }
         else {
             tm37Client.disconnect();
-            tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
+            tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint, desiredHeight);
         }
         return CosmWasmClient.create(tmClient);
     }
@@ -351,6 +351,33 @@ class CosmWasmClient {
             }
         }
     }
+
+    /**
+     * Makes a smart query on the contract, returns the parsed JSON document.
+     *
+     * Promise is rejected when contract does not exist.
+     * Promise is rejected for invalid query format.
+     * Promise is rejected for invalid response format.
+     */
+    async getAllContractState(address, paginationKey) {
+        try {
+            return await this.forceGetQueryClient().wasm.getAllContractState(address, paginationKey);
+        }
+        catch (error) {
+            if (error instanceof Error) {
+                if (error.message.startsWith("not found: contract")) {
+                    throw new Error(`No contract found at address "${address}"`);
+                }
+                else {
+                    throw error;
+                }
+            }
+            else {
+                throw error;
+            }
+        }
+    }
+
     async txsQuery(query) {
         const results = await this.forceGetTmClient().txSearchAll({ query: query });
         return results.txs.map((tx) => {
