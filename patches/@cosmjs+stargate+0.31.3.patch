diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.d.ts b/node_modules/@cosmjs/stargate/build/queryclient/utils.d.ts
index 5317078..b7035dd 100644
--- a/node_modules/@cosmjs/stargate/build/queryclient/utils.d.ts
+++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.d.ts
@@ -15,7 +15,7 @@ export declare function toAccAddress(address: string): Uint8Array;
  * Use this with a query response's pagination next key to
  * request the next page.
  */
-export declare function createPagination(paginationKey?: Uint8Array): PageRequest | undefined;
+export declare function createPagination(paginationKey?: Uint8Array, limit?: number): PageRequest | undefined;
 export interface ProtobufRpcClient {
     request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
 }
diff --git a/node_modules/@cosmjs/stargate/build/queryclient/utils.js b/node_modules/@cosmjs/stargate/build/queryclient/utils.js
index 6f4ecaa..22d5f16 100644
--- a/node_modules/@cosmjs/stargate/build/queryclient/utils.js
+++ b/node_modules/@cosmjs/stargate/build/queryclient/utils.js
@@ -24,15 +24,15 @@ exports.toAccAddress = toAccAddress;
  * Use this with a query response's pagination next key to
  * request the next page.
  */
-function createPagination(paginationKey) {
-    return paginationKey ? pagination_1.PageRequest.fromPartial({ key: paginationKey }) : undefined;
+function createPagination(paginationKey, limit) {
+    return paginationKey ? pagination_1.PageRequest.fromPartial({ key: paginationKey, limit: long_1.default.fromInt(limit) }) : undefined;
 }
 exports.createPagination = createPagination;
 function createProtobufRpcClient(base) {
     return {
         request: async (service, method, data) => {
             const path = `/${service}/${method}`;
-            const response = await base.queryAbci(path, data, undefined);
+            const response = await base.queryAbci(path, data, base.tmClient.desiredHeight);
             return response.value;
         },
     };
diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts b/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
index b8ca38c..e954160 100644
--- a/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
+++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts
@@ -28,6 +28,7 @@ export interface SigningStargateClientOptions extends StargateClientOptions {
     readonly broadcastTimeoutMs?: number;
     readonly broadcastPollIntervalMs?: number;
     readonly gasPrice?: GasPrice;
+    readonly desiredHeight?: number;
 }
 export declare function createDefaultAminoConverters(): AminoConverters;
 export declare class SigningStargateClient extends StargateClient {
diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.js b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
index 4330b9f..4a470c3 100644
--- a/node_modules/@cosmjs/stargate/build/signingstargateclient.js
+++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
@@ -58,14 +58,14 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
         // Tendermint/CometBFT 0.34/0.37 auto-detection. Starting with 0.37 we seem to get reliable versions again ðŸŽ‰
         // Using 0.34 as the fallback.
         let tmClient;
-        const tm37Client = await tendermint_rpc_1.Tendermint37Client.connect(endpoint);
+        const tm37Client = await tendermint_rpc_1.Tendermint37Client.connect(endpoint, options.desiredHeight);
         const version = (await tm37Client.status()).nodeInfo.version;
         if (version.startsWith("0.37.")) {
             tmClient = tm37Client;
         }
         else {
             tm37Client.disconnect();
-            tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
+            tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint, options.desiredHeight);
         }
         return SigningStargateClient.createWithSigner(tmClient, signer, options);
     }
diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.d.ts b/node_modules/@cosmjs/stargate/build/stargateclient.d.ts
index 0cd6feb..b5fc618 100644
--- a/node_modules/@cosmjs/stargate/build/stargateclient.d.ts
+++ b/node_modules/@cosmjs/stargate/build/stargateclient.d.ts
@@ -137,6 +137,7 @@ export interface PrivateStargateClient {
 }
 export interface StargateClientOptions {
     readonly accountParser?: AccountParser;
+    readonly desiredHeight?: number;
 }
 export declare class StargateClient {
     private readonly tmClient;
diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.js b/node_modules/@cosmjs/stargate/build/stargateclient.js
index 3268b13..3845295 100644
--- a/node_modules/@cosmjs/stargate/build/stargateclient.js
+++ b/node_modules/@cosmjs/stargate/build/stargateclient.js
@@ -70,14 +70,14 @@ class StargateClient {
         // Tendermint/CometBFT 0.34/0.37 auto-detection. Starting with 0.37 we seem to get reliable versions again ðŸŽ‰
         // Using 0.34 as the fallback.
         let tmClient;
-        const tm37Client = await tendermint_rpc_1.Tendermint37Client.connect(endpoint);
+        const tm37Client = await tendermint_rpc_1.Tendermint37Client.connect(endpoint, options.desiredHeight);
         const version = (await tm37Client.status()).nodeInfo.version;
         if (version.startsWith("0.37.")) {
             tmClient = tm37Client;
         }
         else {
             tm37Client.disconnect();
-            tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
+            tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint, options.desiredHeight);
         }
         return StargateClient.create(tmClient, options);
     }
@@ -299,6 +299,7 @@ class StargateClient {
         return results.txs.map((tx) => {
             const txMsgData = abci_1.TxMsgData.decode(tx.result.data ?? new Uint8Array());
             return {
+                ...tx,
                 height: tx.height,
                 txIndex: tx.index,
                 hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),
